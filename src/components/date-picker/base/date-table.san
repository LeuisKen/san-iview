<template>
    <div
        class="{{classes}}"
        on-mousemove="handleMouseMove">
        <div class="{{prefixCls}}-header">
            <span s-for="day in headerDays">
                {{day}}
            </span>
        </div>
        <span 
            class="{{cell | cellCls}}"
            s-for="cell, index in cells">
            <em on-click="handleClick(cell)">
                {{ cell.text }}
            </em>
        </span>
    </div>
</template>
<script>
    import {DataTypes} from 'san';
    import classNames from 'classnames';
    import {getFirstDayOfMonth, getDayCountOfMonth} from '../util';
    import {deepCopy} from '../../../utils/assist';

    const prefixCls = 'view-date-picker-cells';

    const clearHours = function (time) {
        const cloneDate = new Date(time);
        cloneDate.setHours(0, 0, 0, 0);
        return cloneDate.getTime();
    };

    export default {
        dataTypes: {
            year: DataTypes.number,
            month: DataTypes.number
        },
        initData() {
            return {
                date: {},
                year: {},
                month: {},
                selectionMode: 'day',
                minDate: {},
                maxDate: {},
                rangeState: {
                    endDate: null,
                    selecting: false
                },
                value: '',
                prefixCls: prefixCls,
                readCells: []
            };
        },
        computed: {
            classes() {
                return `${prefixCls}`;
            },
            headerDays() {
                return ['日', '一', '二', '三', '四', '五', '六'];
            },
            cells() {
                const year = this.data.get('year');
                const month = this.data.get('month');

                const date = new Date(year, month, 1);
                // 传入的年月的1号，相对于周几
                const day = (getFirstDayOfMonth(date) || 7);
                // timestamp of today
                const today = clearHours(new Date());
                // timestamp of selected day
                const selectDay = clearHours(new Date(this.data.get('value')));
                const minDay = clearHours(new Date(this.data.get('minDate')));
                const maxDay = clearHours(new Date(this.data.get('maxDate')));

                const dateCountOfMonth = getDayCountOfMonth(date.getFullYear(), date.getMonth());
                const dateCountOfLastMonth = getDayCountOfMonth(date.getFullYear(), (date.getMonth() === 0 ? 11 : date.getMonth() - 1));

                const disabledDate = this.data.get('disabledDate');

                let cells = [];
                const cell_tmpl = {
                    text: '',
                    type: '',
                    date: null,
                    selected: false,
                    disabled: false,
                    range: false,
                    start: false,
                    end: false
                };

                // 上个月的天数
                if (day !== 7) {
                    for (let i = 0; i < day; i++) {
                        const cell = deepCopy(cell_tmpl);
                        cell.type = 'prev-month';
                        cell.text = dateCountOfLastMonth - (day - 1) + i;
                        cell.date = new Date(year, month - 1, cell.text);
                        const time = clearHours(cell.date);
                        cell.disabled = typeof disabledDate === 'function' && disabledDate(new Date(time));
                        cells.push(cell);
                    }
                }

                for (let i = 1; i <= dateCountOfMonth; i++) {
                    const cell = deepCopy(cell_tmpl);
                    cell.text = i;
                    cell.date = new Date(year, month, cell.text);
                    const time = clearHours(cell.date);
                    cell.type = time === today ? 'today' : 'normal';
                    cell.selected = time === selectDay;
                    cell.disabled = typeof disabledDate === 'function' && disabledDate(new Date(time));
                    cell.range = time >= minDay && time <= maxDay;
                    cell.start = this.minDate && time === minDay;
                    cell.end = this.maxDate && time === maxDay;

                    cells.push(cell);
                }

                const nextMonthCount = 35 - cells.length;
                for (let i = 1; i <= nextMonthCount; i++) {
                    const cell = deepCopy(cell_tmpl);
                    cell.type = 'next-month';
                    cell.text = i;
                    cell.date = new Date(year, month + 1, cell.text);
                    const time = clearHours(cell.date);
                    cell.disabled = typeof disabledDate === 'function' && disabledDate(new Date(time));
                    cells.push(cell);
                }

                return cells;
            }
        },
        filters: {
            cellCls(cell) {
                return classNames([
                    `${prefixCls}-cell`,
                    {
                        [`${prefixCls}-cell-selected`]: cell.selected || cell.start || cell.end,
                        [`${prefixCls}-cell-disabled`]: cell.disabled,
                        [`${prefixCls}-cell-today`]: cell.type === 'today',
                        [`${prefixCls}-cell-prev-month`]: cell.type === 'prev-month',
                        [`${prefixCls}-cell-next-month`]: cell.type === 'next-month',
                        [`${prefixCls}-cell-range`]: cell.range && !cell.start && !cell.end
                    }
                ]);
            }
        },
        handleClick(cell) {
            if (cell.disabled) {
                return;
            }
            const newDate = cell.date;
            this.fire('pick', newDate);
            this.fire('pick-click');
        },
        getCellCls(cell) {
            return [
                `${prefixCls}-cell`,
                {
                    [`${prefixCls}-cell-selected`]: cell.selected || cell.start || cell.end,
                    [`${prefixCls}-cell-disabled`]: cell.disabled,
                    [`${prefixCls}-cell-today`]: cell.type === 'today',
                    [`${prefixCls}-cell-prev-month`]: cell.type === 'prev-month',
                    [`${prefixCls}-cell-next-month`]: cell.type === 'next-month',
                    [`${prefixCls}-cell-range`]: cell.range && !cell.start && !cell.end
                }
            ];
        }
    };
</script>
